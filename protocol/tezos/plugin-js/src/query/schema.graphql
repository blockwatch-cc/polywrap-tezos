#import * from "../common/schema.graphql"

""" Supported networks for getting operation status """
enum GetOperationStatusSupportedNetworks {
  mainnet
  hangzhounet
  granadanet
  ithacanet
}

""" Describes the status of a transaction """
type OperationStatus {
  """ hash of operation"""
  hash: String!
  """ type of transaction """
  type: String!
  """ Block hash at which the operation was included on-chain """
  block: String!
  """ Block time at which the operation was included on-chain """
  time: String!
  """ Block height at which the operation was included on-chain """
  height: String!
  """ Cycle in which the operation was included on-chain """
  cycle: UInt32!
  """ Unique sender account ‘nonce’ value """
  counter: UInt32!
  """ Operation status applied, failed, backtracked, skipped. """
  status: String!
  """ Flag indicating operation was successfully applied """
  is_success: Boolean!
  """ Flag indicating smart-contract calls """
  is_contract: Boolean!
  """ Caller-defined gas limit """
  gas_limit: UInt32!
  """ Gas used by the operation """
  gas_used: UInt32!
  """ Effective price per gas unit in mutez """
  gas_price: UInt32!
  """ Caller-defined storage limit """
  storage_limit: UInt32!
  """ Actual storage size allocated """
  storage_size: UInt32!
  """ Part of the storage the operation paid for """
  storage_paid: UInt32!
  """ Amount of tokens transferred in tz """
  volume: UInt32!
  """ Fees paid in tez """
  fee: UInt32!
  """ Token days destroyed by this operation (tokens transferred * token idle time) """
  days_destroyed: UInt32!
  """ Operation sender """
  sender: String!
  """ Transaction receiver, may be empty """
  receiver: String!
  """ Number of blocks following the inclusion of this operation """
  confirmations: UInt32!
}

""" Estimate transaction result """
type EstimateResult {
  """ Flag indicating error occurred """
  error: Boolean!
  """ Reason for error """
  reason: String
  """ Estimate transaction """
  estimate: Estimate
}

""" Describes reveal parameters """
type RevealParams {
  """ Called-defined fee limit to be paid """
  fee: UInt32
  """ Caller-defined gas limit """
  gasLimit: UInt32
  """ Caller-defined storage limit """
  storageLimit: UInt32
}

type Query {
  """ Public key """
  getPublicKey(
    connection: Connection
  ): String!

  """ Public key hash """
  getPublicKeyHash(
    connection: Connection
  ): String!

  """ Reveal transaction estimate """
  getRevealEstimate(
    connection: Connection
    params: RevealParams!
  ): EstimateResult!

  """ Transfer transaction estimate """
  getTransferEstimate(
    connection: Connection
    params: SendParams!
  ): EstimateResult!

 """ Originate transaction estimate """
  getOriginateEstimate(
    """ Connection """
    connection: Connection
    params: OriginateParams!
  ): EstimateResult! 

  """ Check validity of address """
  checkAddress(
    """ Connection """
    connection: Connection
    """ Tezos address """
    address: String!
  ): Boolean!

  """ Balance of tezos account """
  getBalance(
    """ Connection """
    connection: Connection
    """ Tezos address """
    address: String!
  ): String!

  """ Read storage of contract """
  getContractStorage(
    """ Tezos address """
    address: String!
    """ Storage key """
    key: String!
    """ Nested key of key value. Can be empty """
    field: String
    """ Connection """
    connection: Connection
  ): String!

  """ Execute Tzip16View """
  executeTzip16View(
    """ Address of tezos account """
    address: String!
    """ View handler """
    viewName: String!
    """ Arguments """
    args: String!
    """ Connection """
    connection: Connection
  ): String!

  """ Get wallet account public key hash """
  getWalletPKH(
    """ Connection """
    connection: Connection
  ): String!

  """ Get operation status """
  getOperationStatus(
    """ Hash of operation """
    hash: String!
    """ Supported network for getting operation status that wrapper supports """
    network: GetOperationStatusSupportedNetworks!
  ): OperationStatus!

  """ Encode michelson express to bytes """
  encodeMichelsonExpressionToBytes(
    """ Michelson expression """
    expression: String!
    """ Value expression """
    value: String!
  ): String!

  """ Call contract view """
  callContractView(
    """ Contract address """
    address: String!
    """ Handler """
    view: String!
    """ Arguments """
    args: String
    """ Connection """
    connection: Connection
  ): String!

  """ Get Transfer Params """
  getContractCallTransferParams(
    """ Address of contract """
    address: String!
    """ Method to call """
    method: String!
    """ Arguments """
    args: String
    """ Send parameters """
    params: SendParams
    """ Connection """
    connection: Connection
  ): TransferParams!
}
